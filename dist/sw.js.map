{"version":3,"sources":["../public/sw.js"],"names":["event","updateWidget","updateName","widgetDefinition","payload","name"],"mappings":"AAAA,cACE,yEACF,EAsCA,KAAK,iBAAiB,gBAAkB,GAAU,CAChD,EAAM,UAAU,EAAa,CAAK,CAAC,CACrC,CAAC,EAGD,KAAK,iBAAiB,eAAiB,GAAU,CAC/C,EAAM,UAAU,EAAa,CAAK,CAAC,CACrC,CAAC,EAID,KAAK,iBAAiB,cAAgB,GAAU,CAC1C,EAAM,QAAU,cAClB,EAAM,UAAU,EAAW,CAAK,CAAC,CAErC,CAAC,EAID,KAAK,iBAAiB,kBAAoB,GAAU,CAAA,CAAE,EAEtD,MAAM,EAAe,MAAO,GAAU,CAEpC,MAAM,EAAmB,EAAM,OAAO,WAGhC,EAAU,CACd,SAAU,KAAK,UACb,MAAO,MAAM,MAAM,EAAiB,YAAY,GAAG,KAAI,CACxD,EACD,KAAM,KAAK,UAAU,MAAO,MAAM,MAAM,EAAiB,IAAI,GAAG,MAAM,CACvE,EAGD,MAAM,KAAK,QAAQ,mBAAmB,EAAM,WAAY,CAAO,CACjE,EAEM,EAAa,MAAO,GAAU,CAClC,MAAM,EAAO,EAAM,KAAK,KAAM,EAAC,KAGzB,EAAmB,EAAM,OAAO,WAGhC,EAAU,CACd,SAAU,KAAK,UACb,MAAO,MAAM,MAAM,EAAiB,YAAY,GAAG,KAAI,CACxD,EACD,KAAM,KAAK,UAAU,CAAE,KAAA,CAAI,CAAE,CAC9B,EAGD,MAAM,KAAK,QAAQ,mBAAmB,EAAM,WAAY,CAAO,CACjE,EAEA,KAAK,iBAAiB,OAAS,GAAU,CACvC,EAAM,UACJ,aAAa,iBAAiB,SAAU,CACtC,KAAM,8BACP,CAAA,CACF,CACH,CAAC,EAED,QAAQ,WAAW,iBAAiB,21EAAK,eAAiB,CAAA,CAAE","file":"sw.js","sourcesContent":["importScripts(\n  'https://storage.googleapis.com/workbox-cdn/releases/7.3.0/workbox-sw.js'\n);\n\n// import { getToken } from 'firebase/messaging';\n\n// // Your existing Service Worker logic below\n// // (Precaching, fetch handling, etc)\n// // BMuqicDEKYewQecSiObnuJ8cV2Gd3E8lOSzE8wrTaBtTMuR6-66N4z3abqmxJZQ84U7VcXT08PaRHjp3Gk4f00o\n// // Initialize Firebase App inside SW\n// firebase.initializeApp({\n//   apiKey: 'AIzaSyB0iuZzabjCGefy9OokK6UFxOvF6jJaTAU',\n//   authDomain: 'push-notifications-test-4bdb0.firebaseapp.com',\n//   projectId: 'push-notifications-test-4bdb0',\n//   storageBucket: 'push-notifications-test-4bdb0.firebasestorage.app',\n//   messagingSenderId: '158709240339',\n//   appId: '1:158709240339:web:e5b363e9773e5abed1e5e6',\n// });\n\n// // Initialize Firebase Messaging\n// const messaging = firebase.messaging();\n\n// // Handle background push messages\n// messaging.onBackgroundMessage(function (payload) {\n//   console.log('[sw.js] Received background message ', payload);\n//   const notificationTitle = payload.notification.title;\n//   const notificationOptions = {\n//     body: payload.notification.body,\n//     icon: '/icons/icon-192x192.png',\n//   };\n\n//   self.registration.showNotification(notificationTitle, notificationOptions);\n// });\n\n// Your other SW event listeners (install, activate, fetch, etc.) remain untouched\n\n// This is your Service Worker, you can put any of your custom Service Worker\n// code in this file, above the `precacheAndRoute` line.\n\n// When widget is installed/pinned, push initial state.\nself.addEventListener('widgetinstall', (event) => {\n  event.waitUntil(updateWidget(event));\n});\n\n// When widget is shown, update content to ensure it is up-to-date.\nself.addEventListener('widgetresume', (event) => {\n  event.waitUntil(updateWidget(event));\n});\n\n// When the user clicks an element with an associated Action.Execute,\n// handle according to the 'verb' in event.action.\nself.addEventListener('widgetclick', (event) => {\n  if (event.action == 'updateName') {\n    event.waitUntil(updateName(event));\n  }\n});\n\n// When the widget is uninstalled/unpinned, clean up any unnecessary\n// periodic sync or widget-related state.\nself.addEventListener('widgetuninstall', (event) => {});\n\nconst updateWidget = async (event) => {\n  // The widget definition represents the fields specified in the manifest.\n  const widgetDefinition = event.widget.definition;\n\n  // Fetch the template and data defined in the manifest to generate the payload.\n  const payload = {\n    template: JSON.stringify(\n      await (await fetch(widgetDefinition.msAcTemplate)).json()\n    ),\n    data: JSON.stringify(await (await fetch(widgetDefinition.data)).json()),\n  };\n\n  // Push payload to widget.\n  await self.widgets.updateByInstanceId(event.instanceId, payload);\n};\n\nconst updateName = async (event) => {\n  const name = event.data.json().name;\n\n  // The widget definition represents the fields specified in the manifest.\n  const widgetDefinition = event.widget.definition;\n\n  // Fetch the template and data defined in the manifest to generate the payload.\n  const payload = {\n    template: JSON.stringify(\n      await (await fetch(widgetDefinition.msAcTemplate)).json()\n    ),\n    data: JSON.stringify({ name }),\n  };\n\n  // Push payload to widget.\n  await self.widgets.updateByInstanceId(event.instanceId, payload);\n};\n\nself.addEventListener('push', (event) => {\n  event.waitUntil(\n    registration.showNotification('Hello!', {\n      body: 'This is a push notification!',\n    })\n  );\n});\n\nworkbox.precaching.precacheAndRoute(self.__WB_MANIFEST || []);\n\n"]}